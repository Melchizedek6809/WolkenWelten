This codebase started out using C++ because of a multitude of reasons:
- It is still the standard for GameDev
- Standardized with multiple Compilers to choose from
- Compiles to Machine Code and no GC
- Can compile to WASM so it runs in a browser, quite the exciting possibility.
- Lots of Libs (GLM), C++ ones and C ones

Although after a couple of months of development some shortcomings started to
appear:
- Compiling/Linking took far too long on my slow machines
	(at times about 10s just relinking with a single changed object file)
- Constructor/Desturctor usage had a massive runtime performance cost in some
	parts of the codebase, especially noticeable in the particle system.
- Most of the convenience features C++ has over C did not seem to make much of
	an impact on the time it took me to write certain features, this might just
	be me being more used to the C way, but still. The one Feature I am really
	missing is function overloading/name mangling

I started the migration after noticing about a 30x performance improvement after
rewriting the particle system from using objects/constructors/destuctors to a
really simple C based one, and it uses fewer LOC as well, which convinced me of
the necessity of migrating to C. I started out just rewriting everything in a C
style while still using a C++ compiler so I couls swap out individual parts of
the codebase but keep it working so I could test that functionality stayed the
same. In the end also removed GLM and replaced it with a bunch of procedures
since most of the rendering/matrix stuff here is quite simplistic.
