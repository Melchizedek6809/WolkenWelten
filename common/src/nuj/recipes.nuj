; All the Recipes

(define recipes (arr-new 256))
(define recipe-new-id)
(let ((recipe-cur-id 256))
	(set! recipe-new-id (λ () "Returns an unused item ID"
		(set! recipe-cur-id (+ recipe-cur-id 1)) (- recipe-cur-id 1))))

(define recipe-sync (λ (obj) "Syncs the Recipe with the ω OBJ"
	(r-result   (resolve (obj result-id  )) (obj result-amt  ))
	(r-ingred 0 (resolve (obj ingred-id-0)) (obj ingred-amt-0))
	(r-ingred 1 (resolve (obj ingred-id-1)) (obj ingred-amt-1))
	(r-ingred 2 (resolve (obj ingred-id-2)) (obj ingred-amt-2))
	(r-ingred 3 (resolve (obj ingred-id-3)) (obj ingred-amt-3))

	(arr-set! recipes id obj)))

(define recipe-sync-all (λ (i) "Syncs all Recipes with their respective ω"
	(cond ((nil? (arr-ref recipes i)) #t)
	      (#t (recipe-sync (arr-ref recipes i)) (recipe-sync-all (+ i 1))))))


(define recipe-craft (λ (id times) "Crafts recipe with ID"
	((arr-ref recipes id) craft)))

(define recipe-default (ω ()
	(define id -1)

	(define ingred-id-0 0)
	(define ingred-amt-0 0)
	(define ingred-id-1 0)
	(define ingred-amt-1 0)
	(define ingred-id-2 0)
	(define ingred-amt-2 0)
	(define ingred-id-3 0)
	(define ingred-amt-3 0)

	(define craft (λ () (say "I got nothing to do")))

	(define result-amt 0)
	(define result-id 0)))

(event-bind "on-init" (λ () ""
	(recipe-sync-all)
	(log (ansi-green "Recipes initialized"))
))
