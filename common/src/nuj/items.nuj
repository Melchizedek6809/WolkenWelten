; This File contains all the item defitions
; ToDo find a better way for these defines
(define on-init  '())
(define on-spawn '())
(define on-join  '())

(define cat-none   0)
(define cat-dirt   1)
(define cat-stone  2)
(define cat-wood   3)
(define cat-leaves 4)

(define items (arr-new 256))
(define item-new-id)
(let ((item-cur-id 256))
	(set! item-new-id (λ () "Returns an unused item ID"
		(set! item-cur-id (+ item-cur-id 1)) (- item-cur-id 1))))

(define item-sync (λ (obj) "Syncs the itemType with the ω OBJ"
	(it-name (obj id) (obj name))
	(it-fire-health (obj id) (obj fire-health))
	(it-fire-dmg (obj id) (obj fire-dmg))
	(it-ammunition (obj id) (resolve (obj ammunition)))
	(it-mesh (obj id) (resolve (obj mesh)))
	(it-damage (obj id) cat-none (obj dmg))
	(it-damage (obj id) cat-dirt (obj dmg-dirt))
	(it-damage (obj id) cat-stone (obj dmg-stone))
	(it-damage (obj id) cat-wood (obj dmg-wood))
	(it-damage (obj id) cat-leaves (obj dmg-leaves))
	(it-inaccuracy (obj id) (obj inaccuracy))
	(it-mag-size (obj id) (obj mag-size))
	(it-stack-size (obj id) (obj stack-size))

	(set! (obj sym) (obj id))
	(arr-set! items (- (obj id) 256) obj)))

(define item-sync-all (λ (i) "Syncs all itemTypes with their respective ω"
	(cond ((nil? (arr-ref items i)) #t)
	      (#t (item-sync (arr-ref items i)) (item-sync-all (+ i 1))))))

(define item-primary (λ (id) "Evaluates the primary callback of item ID"
	(cond ((procedure? ((arr-ref items (- id 256)) primary)) (((arr-ref items (- id 256)) primary)))
	      (#t #f))))

(define item-secondary (λ (id) "Evaluates the secondary callback of item ID"
	(cond ((procedure? ((arr-ref items (- id 256)) secondary)) (((arr-ref items (- id 256)) secondary)))
	      (#t #f))))

(define item-tertiary (λ (id) "Evaluates the tertiary callback of item ID"
	(cond ((procedure? ((arr-ref items (- id 256)) tertiary)) (((arr-ref items (- id 256)) tertiary)))
	      (#t #f))))

(define item-default (ω () "Default item parent, having every method defined with default values or λ."
	(define id 0)
	(define sym 'i-default)
	(define name "DEFAULT")
	(define fire-health 256)
	(define fire-dmg 1)
	(define ammunition 0)
	(define mesh 'm-pear)
	(define dmg 1)
	(define dmg-dirt 1)
	(define dmg-stone 1)
	(define dmg-wood 1)
	(define dmg-leaves 1)
	(define inaccuracy 8.0)
	(define mag-size 0)
	(define primary   (lambda () #f))
	(define secondary (lambda () #f))
	(define tertiary  (lambda () #f))
	(define stack-size 99)))


(define i-grenade)
(item-sync (item-default (ω () "Grenade go BOOM!"
	(define id (item-new-id))
	(define sym 'i-grenade)
	(define name "Grenade")
	(define fire-health 96)
	(define fire-dmg 24)
	(define ammunition id)
	(define secondary (lambda () (cond ((try-to-use)
		(grenade-new (vy+ (player-pos) 0.5))
		(start-anim 0 300) #t)
		(#t #f))))
	(define mesh 'm-grenade))))

(define i-bomb)
(item-sync (item-default (ω () "Bomb go BOOM!"
	(define id (item-new-id))
	(define sym 'i-bomb)
	(define name "Bomb")
	(define fire-health 96)
	(define fire-dmg 16)
	(define ammunition id)
	(define secondary (lambda () (cond ((try-to-use)
		(grenade-new (vy+ (player-pos) 0.5) (player-rot) 8.0)
		(start-anim 0 300) #t)
		(#t #f))))
	(define mesh 'm-bomb))))

(define i-pear)
(item-sync (item-default (ω () "A tasty Pear"
	(define id (item-new-id))
	(define sym 'i-pear)
	(define name "Pear")
	(define fire-health 48)
	(define fire-dmg 8)
	(define ammunition id)
	(define mesh 'm-pear))))

(define i-stoneaxe)
(item-sync (item-default (ω () "A simple Tool for cutting down trees"
	(define id (item-new-id))
	(define sym 'i-stoneaxe)
	(define name "Stone Axe")
	(define dmg 4)
	(define dmg-wood 3)
	(define secondary (lambda () (try-to-throw)))
	(define mesh 'm-stoneaxe))))

(define i-stonepickaxe)
(item-sync (item-default (ω () "A simple Tool for cutting down trees"
	(define id (item-new-id))
	(define sym 'i-stonepickaxe)
	(define name "Stone Pickaxe")
	(define dmg 4)
	(define dmg-stone 3)
	(define dmg-dirt 2)
	(define mesh 'm-stonepickaxe))))

(define i-blaster)
(item-sync (item-default (ω () "A simple energy weapon"
	(define id (item-new-id))
	(define sym 'i-blaster)
	(define name "Blaster")
	(define inaccuracy 2)
	(define ammunition 'i-crystalbulle)
	(define fire-dmg 6)
	(define fire-health 64)
	(define stack-size 1)
	(define mag-size 30)
	(define tertiary (lambda () (item-reload 50)))
	(define mesh 'm-blaster))))

(define i-masterblaster)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-masterblaster)
	(define name "Master Blaster")
	(define inaccuracy 4)
	(define ammunition 'i-crystalbulle)
	(define fire-dmg 6)
	(define fire-health 64)
	(define stack-size 1)
	(define mag-size 90)
	(define tertiary (lambda () (item-reload 200)))
	(define mesh 'm-masterblaster))))

(define i-assaultblaste)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-assaultblaste)
	(define name "Assault Blaster")
	(define inaccuracy 8)
	(define ammunition 'i-flamebullet)
	(define fire-dmg 6)
	(define fire-health 64)
	(define stack-size 1)
	(define mag-size 60)
	(define tertiary (lambda () (item-reload 50)))
	(define mesh 'm-assaultblaste))))

(define i-shotgun)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-shotgun)
	(define name "Shotgun")
	(define inaccuracy 48)
	(define ammunition 'i-flamebullet)
	(define fire-dmg 6)
	(define fire-health 64)
	(define stack-size 1)
	(define mag-size 60)
	(define tertiary (lambda () (item-reload 256)))
	(define mesh 'm-shotgunblaste))))

(define i-crystalbulle)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-crystalbulle)
	(define name "Crystal Bullet")
	(define fire-dmg 8)
	(define fire-health 64)
	(define stack-size 999)
	(define mesh 'm-crystalbulle))))

(define i-ironbar)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-ironbar)
	(define name "Iron Bar")
	(define mesh 'm-ironbar))))

(define i-ironaxe)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-ironaxe)
	(define name "Iron Axe")
	(define stack-size 1)
	(define dmg 6)
	(define dmg-wood 5)
	(define secondary (lambda () (try-to-throw)))
	(define mesh 'm-ironaxe))))

(define i-ironpickaxe)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-ironpickaxe)
	(define name "Iron Pickaxe")
	(define stack-size 1)
	(define dmg 6)
	(define dmg-stone 5)
	(define dmg-dirt 3)
	(define mesh 'm-ironpickaxe))))

(define i-crystalbar)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-crystalbar)
	(define name "Crystal Bar")
	(define mesh 'm-crystalbar))))

(define i-crystalaxe)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-crystalaxe)
	(define name "Crystal Axe")
	(define dmg 8)
	(define dmg-wood 8)
	(define secondary (lambda () (try-to-throw)))
	(define mesh 'm-crystalaxe))))

(define i-crystalpickax)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-crystalpickax)
	(define name "Crystal Pickaxe")
	(define dmg 8)
	(define dmg-stone 8)
	(define dmg-dirt 8)
	(define mesh 'm-crystalpickax))))

(define i-cherry)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-cherry)
	(define name "Cherry")
	(define fire-dmg 6)
	(define fire-health 96)
	(define mesh 'm-cherry))))

(define i-clusterbomb)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-clusterbomb)
	(define name "Cluster Bomb")
	(define fire-dmg 12)
	(define fire-health 96)
	(define secondary (lambda () (cond ((try-to-use)
		(grenade-new (vy+ (player-pos) 0.5) (player-rot) 0.1 256 3.0)
		(start-anim 0 300) #t)
		(#t #f))))
	(define mesh 'm-bomb))))

(define i-glider)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-glider)
	(define name "Glider")
	(define fire-dmg 8)
	(define fire-health 198)
	(define mesh 'm-glider))))

(define i-hook)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-hook)
	(define name "Hook")
	(define fire-health 1024)
	(define mesh 'm-hook))))

(define i-jetpack)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-jetpack)
	(define name "Jetpack")
	(define mesh 'm-jetpack))))

(define i-poop)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-poop)
	(define name "Poop")
	(define mesh 'm-poop))))

(define i-meat)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-meat)
	(define name "Meat")
	(define ammunition id)
	(define fire-health 96)
	(define mesh 'm-meat))))

(define i-cookedmeat)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-cookedmeat)
	(define name "Cooked Meat")
	(define ammunition id)
	(define fire-health 48)
	(define mesh 'm-cookedmeat))))

(define i-fur)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-fur)
	(define name "Fur")
	(define mesh 'm-fur))))

(define i-burntmeat)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-burntmeat)
	(define name "Burnt Meat")
	(define mesh 'm-burntmeat))))

(define i-flintandsteel)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-flintandsteel)
	(define stack-size 1)
	(define name "Flint and Steel")
	(define mesh 'm-flintandsteel))))

(define i-flamethrower)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-flamethrower)
	(define stack-size 1)
	(define mag-size 90)
	(define fire-dmg 8)
	(define fire-health 128)
	(define inaccuracy 16)
	(define ammunition 'i-flamebullet)
	(define name "Flamethrower")
	(define tertiary (lambda () (item-reload 128)))
	(define mesh 'm-flamethrower))))

(define i-flamebullet)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-flamebullet)
	(define stack-size 999)
	(define fire-dmg 8)
	(define fire-health 64)
	(define name "Flamebullet")
	(define mesh 'm-flamebullet))))

(define i-irondust)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-irondust)
	(define fire-dmg 1)
	(define fire-health 256)
	(define name "Irondust")
	(define mesh 'm-irondust))))

(define i-crystaldust)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-crystaldust)
	(define fire-dmg 1)
	(define fire-health 512)
	(define name "Crystaldust")
	(define mesh 'm-crystaldust))))

(define i-flamestick)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-flamestick)
	(define name "Flamestick")
	(define mesh 'm-flamestick))))

(define i-waterthrower)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-waterthrower)
	(define name "Waterthrower")
	(define ammunition 'i-flamebullet)
	(define inaccuracy 16)
	(define mag-size 90)
	(define stack-size 1)
	(define tertiary (lambda () (item-reload 128)))
	(define mesh 'm-waterthrower))))

(define i-stonespear)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-stonespear)
	(define name "Stone Spear")
	(define dmg 6)
	(define secondary (lambda () (try-to-throw)))
	(define mesh 'm-stonespear))))

(define i-ironspear)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-ironspear)
	(define name "Iron Spear")
	(define dmg 8)
	(define secondary (lambda () (try-to-throw)))
	(define mesh 'm-ironspear))))

(define i-crystalspear)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-crystalspear)
	(define name "Crystal Spear")
	(define dmg 10)
	(define secondary (lambda () (try-to-throw)))
	(define mesh 'm-crystalspear))))

(define i-plantmatter)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-plantmatter)
	(define name "Plantmatter")
	(define fire-dmg 2)
	(define fire-health 256)
	(define mesh 'm-plantmatter))))

(define i-straw)
(item-sync (item-default (ω () "A simple but powerful energy weapon"
	(define id (item-new-id))
	(define sym 'i-straw)
	(define name "Straw")
	(define fire-dmg 8)
	(define fire-health 256)
	(define mesh 'm-straw))))

(event-bind "on-init" (λ () ""
	(item-sync-all)
	(log (ansi-green "Items initialized"))
))
